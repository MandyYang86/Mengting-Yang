-- MySQL Script generated by MySQL Workbench
-- Thu Nov 30 23:35:08 2017
-- Model: New Model    Version: 1.0
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`City`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`City` (
  `CityID` INT NOT NULL,
  `CityName` VARCHAR(45) NULL,
  PRIMARY KEY (`CityID`),
  UNIQUE INDEX `CityID_UNIQUE` (`CityID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Territory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Territory` (
  `TerritoryID` INT NOT NULL,
  `TerritoryName` VARCHAR(45) NULL,
  `City_CityID` INT NOT NULL,
  PRIMARY KEY (`TerritoryID`, `City_CityID`),
  INDEX `fk_Territory_City1_idx` (`City_CityID` ASC),
  UNIQUE INDEX `TerritoryID_UNIQUE` (`TerritoryID` ASC),
  CONSTRAINT `fk_Territory_City1`
    FOREIGN KEY (`City_CityID`)
    REFERENCES `mydb`.`City` (`CityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Supplier`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Supplier` (
  `SupplierID` INT NOT NULL,
  `SupplierName` VARCHAR(45) NULL,
  PRIMARY KEY (`SupplierID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Territory_has_Supplier`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Territory_has_Supplier` (
  `Territory_TerritoryID` INT NOT NULL,
  `Supplier_SupplierID` INT NOT NULL,
  PRIMARY KEY (`Territory_TerritoryID`, `Supplier_SupplierID`),
  INDEX `fktosupplier_idx` (`Supplier_SupplierID` ASC),
  CONSTRAINT `fk_Territory_has_Supplier_Territory1`
    FOREIGN KEY (`Territory_TerritoryID`)
    REFERENCES `mydb`.`Territory` (`TerritoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fktosupplier`
    FOREIGN KEY (`Supplier_SupplierID`)
    REFERENCES `mydb`.`Supplier` (`SupplierID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`ProductCategory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`ProductCategory` (
  `ProductCategoryID` INT NOT NULL,
  `ProductCategoryName` VARCHAR(45) NULL,
  PRIMARY KEY (`ProductCategoryID`),
  UNIQUE INDEX `ProductCategoryID_UNIQUE` (`ProductCategoryID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Product`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Product` (
  `ProductID` INT NOT NULL,
  `ProductNumber` INT NULL,
  `ProductCost` INT NULL,
  `ProductCategory_ProductCategoryID` INT NOT NULL,
  `ProductName` VARCHAR(45) NULL,
  PRIMARY KEY (`ProductID`, `ProductCategory_ProductCategoryID`),
  INDEX `fk_Product_ProductCategory1_idx` (`ProductCategory_ProductCategoryID` ASC),
  UNIQUE INDEX `ProductID_UNIQUE` (`ProductID` ASC),
  CONSTRAINT `fk_Product_ProductCategory1`
    FOREIGN KEY (`ProductCategory_ProductCategoryID`)
    REFERENCES `mydb`.`ProductCategory` (`ProductCategoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`SalesPerson`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SalesPerson` (
  `SalesPersonID` INT NOT NULL,
  `SalesPersonName` VARCHAR(45) NULL,
  `Supplier_SupplierID` INT NOT NULL,
  PRIMARY KEY (`SalesPersonID`),
  INDEX `fk_SalesPerson_Supplier1_idx` (`Supplier_SupplierID` ASC),
  UNIQUE INDEX `SalesPersonID_UNIQUE` (`SalesPersonID` ASC),
  CONSTRAINT `fk_SalesPerson_Supplier1`
    FOREIGN KEY (`Supplier_SupplierID`)
    REFERENCES `mydb`.`Supplier` (`SupplierID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`MarketSupplierOrder`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`MarketSupplierOrder` (
  `MarketSupplierOrderID` INT NOT NULL,
  `OrderDate` DATE NULL,
  PRIMARY KEY (`MarketSupplierOrderID`),
  UNIQUE INDEX `MarketSupplierOrderID_UNIQUE` (`MarketSupplierOrderID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`MarketSupplierOrderItem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`MarketSupplierOrderItem` (
  `Product_ProductID` INT NOT NULL,
  `MarketSupplierOrder_MarketSupplierOrderID` INT NOT NULL,
  `MarketSupplierOrderItemPrice` INT NULL,
  `MarketSupplierOrderItemNumber` INT NULL,
  PRIMARY KEY (`Product_ProductID`, `MarketSupplierOrder_MarketSupplierOrderID`),
  INDEX `fk_MarketSupplierOrderItem_Product1_idx` (`Product_ProductID` ASC),
  INDEX `fk_MarketSupplierOrderItem_MarketSupplierOrder1_idx` (`MarketSupplierOrder_MarketSupplierOrderID` ASC),
  CONSTRAINT `fk_MarketSupplierOrderItem_Product1`
    FOREIGN KEY (`Product_ProductID`)
    REFERENCES `mydb`.`Product` (`ProductID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_MarketSupplierOrderItem_MarketSupplierOrder1`
    FOREIGN KEY (`MarketSupplierOrder_MarketSupplierOrderID`)
    REFERENCES `mydb`.`MarketSupplierOrder` (`MarketSupplierOrderID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`SuperMarket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SuperMarket` (
  `SuperMarketID` INT NOT NULL,
  `SuperMarketName` VARCHAR(45) NULL,
  `Territory_TerritoryID` INT NOT NULL,
  PRIMARY KEY (`SuperMarketID`),
  INDEX `fk_SuperMarket_Territory1_idx` (`Territory_TerritoryID` ASC),
  UNIQUE INDEX `SuperMarketID_UNIQUE` (`SuperMarketID` ASC),
  CONSTRAINT `fk_SuperMarket_Territory1`
    FOREIGN KEY (`Territory_TerritoryID`)
    REFERENCES `mydb`.`Territory` (`TerritoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`SuperMarket_has_MarketSupplierOrder`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SuperMarket_has_MarketSupplierOrder` (
  `SuperMarket_SuperMarketID` INT NOT NULL,
  `MarketSupplierOrder_MarketSupplierOrderID` INT NOT NULL,
  PRIMARY KEY (`SuperMarket_SuperMarketID`, `MarketSupplierOrder_MarketSupplierOrderID`),
  INDEX `fk_SuperMarket_has_MarketSupplierOrder_MarketSupplierOrder1_idx` (`MarketSupplierOrder_MarketSupplierOrderID` ASC),
  INDEX `fk_SuperMarket_has_MarketSupplierOrder_SuperMarket1_idx` (`SuperMarket_SuperMarketID` ASC),
  CONSTRAINT `fk_SuperMarket_has_MarketSupplierOrder_SuperMarket1`
    FOREIGN KEY (`SuperMarket_SuperMarketID`)
    REFERENCES `mydb`.`SuperMarket` (`SuperMarketID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SuperMarket_has_MarketSupplierOrder_MarketSupplierOrder1`
    FOREIGN KEY (`MarketSupplierOrder_MarketSupplierOrderID`)
    REFERENCES `mydb`.`MarketSupplierOrder` (`MarketSupplierOrderID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Department`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Department` (
  `DepartmentID` INT NOT NULL,
  `DepartmentName` VARCHAR(45) NULL,
  PRIMARY KEY (`DepartmentID`),
  UNIQUE INDEX `DepartmentID_UNIQUE` (`DepartmentID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Employee`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Employee` (
  `EmployeeID` INT NOT NULL,
  `EmployeeName` VARCHAR(45) NULL,
  `EmployeeSalary` INT NULL,
  `EmployeePhone` VARCHAR(45) NULL,
  `Department_DepartmentID` INT NOT NULL,
  PRIMARY KEY (`EmployeeID`),
  INDEX `fk_Employee_Department1_idx` (`Department_DepartmentID` ASC),
  UNIQUE INDEX `EmployeeID_UNIQUE` (`EmployeeID` ASC),
  CONSTRAINT `fk_Employee_Department1`
    FOREIGN KEY (`Department_DepartmentID`)
    REFERENCES `mydb`.`Department` (`DepartmentID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Customer` (
  `CustomerID` INT NOT NULL,
  PRIMARY KEY (`CustomerID`),
  UNIQUE INDEX `CustomerID_UNIQUE` (`CustomerID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`MemberShip`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`MemberShip` (
  `MemberShipID` INT NOT NULL,
  `MemberShipName` VARCHAR(45) NULL,
  `MemberShipPhone` VARCHAR(45) NULL,
  `Customer_CustomerID` INT NOT NULL,
  PRIMARY KEY (`MemberShipID`, `Customer_CustomerID`),
  INDEX `fk_MemberShip_Customer1_idx` (`Customer_CustomerID` ASC),
  UNIQUE INDEX `MemberShipID_UNIQUE` (`MemberShipID` ASC),
  CONSTRAINT `fk_MemberShip_Customer1`
    FOREIGN KEY (`Customer_CustomerID`)
    REFERENCES `mydb`.`Customer` (`CustomerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`CustomerSupermarketOrder`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`CustomerSupermarketOrder` (
  `CustomerSupermarketOrderID` INT NOT NULL,
  `Date` DATE NULL,
  `SuperMarket_SuperMarketID` INT NOT NULL,
  `Customer_CustomerID` INT NOT NULL,
  PRIMARY KEY (`CustomerSupermarketOrderID`),
  INDEX `fk_CustomerSupermarketOrder_SuperMarket1_idx` (`SuperMarket_SuperMarketID` ASC),
  INDEX `fk_CustomerSupermarketOrder_Customer1_idx` (`Customer_CustomerID` ASC),
  UNIQUE INDEX `CustomerSupermarketOrderID_UNIQUE` (`CustomerSupermarketOrderID` ASC),
  CONSTRAINT `fk_CustomerSupermarketOrder_SuperMarket1`
    FOREIGN KEY (`SuperMarket_SuperMarketID`)
    REFERENCES `mydb`.`SuperMarket` (`SuperMarketID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CustomerSupermarketOrder_Customer1`
    FOREIGN KEY (`Customer_CustomerID`)
    REFERENCES `mydb`.`Customer` (`CustomerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`InventoryCategory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`InventoryCategory` (
  `InventoryCategoryID` INT NOT NULL,
  `InventoryCategoryName` VARCHAR(45) NULL,
  PRIMARY KEY (`InventoryCategoryID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`InventoryItem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`InventoryItem` (
  `InventoryItemID` INT NOT NULL,
  `InventoryItemName` VARCHAR(45) NULL,
  `InventoryItemSalePrice` VARCHAR(45) NULL,
  `InventoryItemNumber` VARCHAR(45) NULL,
  `InventoryCategory_InventoryCategoryID` INT NOT NULL,
  PRIMARY KEY (`InventoryItemID`, `InventoryCategory_InventoryCategoryID`),
  INDEX `fk_InventoryItem_InventoryCategory1_idx` (`InventoryCategory_InventoryCategoryID` ASC),
  UNIQUE INDEX `InventoryItemID_UNIQUE` (`InventoryItemID` ASC),
  CONSTRAINT `fk_InventoryItem_InventoryCategory1`
    FOREIGN KEY (`InventoryCategory_InventoryCategoryID`)
    REFERENCES `mydb`.`InventoryCategory` (`InventoryCategoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`CustomerSupermarketOrderItem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`CustomerSupermarketOrderItem` (
  `CustomerSupermarketOrder_CustomerSupermarketOrderID` INT NOT NULL,
  `InventoryItem_InventoryItemID` INT NOT NULL,
  `CustomerSupermarketOrderItemSaleNumber` INT NOT NULL,
  INDEX `fk_CusomerSupermarketOrderItem_InventoryItem1_idx` (`InventoryItem_InventoryItemID` ASC),
  CONSTRAINT `fk_CusomerSupermarketOrderItem_CustomerSupermarketOrder1`
    FOREIGN KEY (`CustomerSupermarketOrder_CustomerSupermarketOrderID`)
    REFERENCES `mydb`.`CustomerSupermarketOrder` (`CustomerSupermarketOrderID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CusomerSupermarketOrderItem_InventoryItem1`
    FOREIGN KEY (`InventoryItem_InventoryItemID`)
    REFERENCES `mydb`.`InventoryItem` (`InventoryItemID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`SuperMarket_has_Customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SuperMarket_has_Customer` (
  `SuperMarket_SuperMarketID` INT NOT NULL,
  `Customer_CustomerID` INT NOT NULL,
  PRIMARY KEY (`SuperMarket_SuperMarketID`, `Customer_CustomerID`),
  INDEX `fk_SuperMarket_has_Customer_Customer1_idx` (`Customer_CustomerID` ASC),
  INDEX `fk_SuperMarket_has_Customer_SuperMarket1_idx` (`SuperMarket_SuperMarketID` ASC),
  CONSTRAINT `fk_SuperMarket_has_Customer_SuperMarket1`
    FOREIGN KEY (`SuperMarket_SuperMarketID`)
    REFERENCES `mydb`.`SuperMarket` (`SuperMarketID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SuperMarket_has_Customer_Customer1`
    FOREIGN KEY (`Customer_CustomerID`)
    REFERENCES `mydb`.`Customer` (`CustomerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`OrderOfSalesPerson`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`OrderOfSalesPerson` (
  `SalesPerson_SalesPersonID` INT NOT NULL,
  `MarketSupplierOrder_MarketSupplierOrderID` INT NOT NULL,
  INDEX `fk_OrderOfSalesPerson_SalesPerson1_idx` (`SalesPerson_SalesPersonID` ASC),
  CONSTRAINT `fk_OrderOfSalesPerson_SalesPerson1`
    FOREIGN KEY (`SalesPerson_SalesPersonID`)
    REFERENCES `mydb`.`SalesPerson` (`SalesPersonID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OrderOfSalesPerson_MarketSupplierOrder1`
    FOREIGN KEY (`MarketSupplierOrder_MarketSupplierOrderID`)
    REFERENCES `mydb`.`MarketSupplierOrder` (`MarketSupplierOrderID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`MarketInventroyCategoty`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`MarketInventroyCategoty` (
  `SuperMarket_SuperMarketID` INT NOT NULL,
  `InventoryCategory_InventoryCategoryID` INT NOT NULL,
  PRIMARY KEY (`SuperMarket_SuperMarketID`, `InventoryCategory_InventoryCategoryID`),
  INDEX `fk_MarketInventroyCategoty_InventoryCategory1_idx` (`InventoryCategory_InventoryCategoryID` ASC),
  CONSTRAINT `fk_MarketInventroyCategoty_SuperMarket1`
    FOREIGN KEY (`SuperMarket_SuperMarketID`)
    REFERENCES `mydb`.`SuperMarket` (`SuperMarketID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_MarketInventroyCategoty_InventoryCategory1`
    FOREIGN KEY (`InventoryCategory_InventoryCategoryID`)
    REFERENCES `mydb`.`InventoryCategory` (`InventoryCategoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`DepartmentsOfSupermarket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`DepartmentsOfSupermarket` (
  `SuperMarket_SuperMarketID` INT NOT NULL,
  `Department_DepartmentID` INT NOT NULL,
  PRIMARY KEY (`SuperMarket_SuperMarketID`, `Department_DepartmentID`),
  INDEX `fk_DepartmentsOfSupermarket_Department1_idx` (`Department_DepartmentID` ASC),
  CONSTRAINT `fk_DepartmentsOfSupermarket_SuperMarket1`
    FOREIGN KEY (`SuperMarket_SuperMarketID`)
    REFERENCES `mydb`.`SuperMarket` (`SuperMarketID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DepartmentsOfSupermarket_Department1`
    FOREIGN KEY (`Department_DepartmentID`)
    REFERENCES `mydb`.`Department` (`DepartmentID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`CategoryOfSupplier`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`CategoryOfSupplier` (
  `Supplier_SupplierID` INT NOT NULL,
  `ProductCategory_ProductCategoryID` INT NOT NULL,
  PRIMARY KEY (`Supplier_SupplierID`, `ProductCategory_ProductCategoryID`),
  INDEX `tocategory_idx` (`ProductCategory_ProductCategoryID` ASC),
  CONSTRAINT `fk_CategoryOfSupplier_Supplier1`
    FOREIGN KEY (`Supplier_SupplierID`)
    REFERENCES `mydb`.`Supplier` (`SupplierID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `tocategory`
    FOREIGN KEY (`ProductCategory_ProductCategoryID`)
    REFERENCES `mydb`.`ProductCategory` (`ProductCategoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`SupplierOrderInventory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SupplierOrderInventory` (
  `MarketSupplierOrderItem_Product_ProductID` INT NOT NULL,
  `MarketSupplierOrderID` INT NOT NULL,
  `InventoryItem_InventoryItemID` INT NOT NULL,
  PRIMARY KEY (`MarketSupplierOrderItem_Product_ProductID`, `MarketSupplierOrderID`, `InventoryItem_InventoryItemID`),
  INDEX `fk_SupplierOrderInventory_InventoryItem1_idx` (`InventoryItem_InventoryItemID` ASC),
  CONSTRAINT `fk_SupplierOrderInventory_MarketSupplierOrderItem1`
    FOREIGN KEY (`MarketSupplierOrderItem_Product_ProductID` , `MarketSupplierOrderID`)
    REFERENCES `mydb`.`MarketSupplierOrderItem` (`Product_ProductID` , `MarketSupplierOrder_MarketSupplierOrderID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SupplierOrderInventory_InventoryItem1`
    FOREIGN KEY (`InventoryItem_InventoryItemID`)
    REFERENCES `mydb`.`InventoryItem` (`InventoryItemID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `mydb`.`City`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`City` (`CityID`, `CityName`) VALUES (1, 'NewYork');
INSERT INTO `mydb`.`City` (`CityID`, `CityName`) VALUES (2, 'Boston');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Territory`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Territory` (`TerritoryID`, `TerritoryName`, `City_CityID`) VALUES (1, 'BeautifulTerritory', 1);
INSERT INTO `mydb`.`Territory` (`TerritoryID`, `TerritoryName`, `City_CityID`) VALUES (2, 'GreatTerritory', 1);
INSERT INTO `mydb`.`Territory` (`TerritoryID`, `TerritoryName`, `City_CityID`) VALUES (3, 'BrightonTerritory', 2);
INSERT INTO `mydb`.`Territory` (`TerritoryID`, `TerritoryName`, `City_CityID`) VALUES (4, 'MaldenTerritory', 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Supplier`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Supplier` (`SupplierID`, `SupplierName`) VALUES (1, 'One');
INSERT INTO `mydb`.`Supplier` (`SupplierID`, `SupplierName`) VALUES (2, 'Two');
INSERT INTO `mydb`.`Supplier` (`SupplierID`, `SupplierName`) VALUES (3, 'Three');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Territory_has_Supplier`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Territory_has_Supplier` (`Territory_TerritoryID`, `Supplier_SupplierID`) VALUES (1, 1);
INSERT INTO `mydb`.`Territory_has_Supplier` (`Territory_TerritoryID`, `Supplier_SupplierID`) VALUES (2, 1);
INSERT INTO `mydb`.`Territory_has_Supplier` (`Territory_TerritoryID`, `Supplier_SupplierID`) VALUES (3, 2);
INSERT INTO `mydb`.`Territory_has_Supplier` (`Territory_TerritoryID`, `Supplier_SupplierID`) VALUES (4, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`ProductCategory`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`ProductCategory` (`ProductCategoryID`, `ProductCategoryName`) VALUES (1, 'StoryBook');
INSERT INTO `mydb`.`ProductCategory` (`ProductCategoryID`, `ProductCategoryName`) VALUES (2, 'NoteBook');
INSERT INTO `mydb`.`ProductCategory` (`ProductCategoryID`, `ProductCategoryName`) VALUES (3, 'Phone');
INSERT INTO `mydb`.`ProductCategory` (`ProductCategoryID`, `ProductCategoryName`) VALUES (4, 'Camera');
INSERT INTO `mydb`.`ProductCategory` (`ProductCategoryID`, `ProductCategoryName`) VALUES (5, 'Milk');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Product`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Product` (`ProductID`, `ProductNumber`, `ProductCost`, `ProductCategory_ProductCategoryID`, `ProductName`) VALUES (1, 120, 15, 1, 'StoryBookOne');
INSERT INTO `mydb`.`Product` (`ProductID`, `ProductNumber`, `ProductCost`, `ProductCategory_ProductCategoryID`, `ProductName`) VALUES (2, 150, 20, 2, 'NoteBookOne');
INSERT INTO `mydb`.`Product` (`ProductID`, `ProductNumber`, `ProductCost`, `ProductCategory_ProductCategoryID`, `ProductName`) VALUES (3, 400, 900, 3, 'IPhone 8');
INSERT INTO `mydb`.`Product` (`ProductID`, `ProductNumber`, `ProductCost`, `ProductCategory_ProductCategoryID`, `ProductName`) VALUES (4, 50, 500, 4, 'Canon M5');
INSERT INTO `mydb`.`Product` (`ProductID`, `ProductNumber`, `ProductCost`, `ProductCategory_ProductCategoryID`, `ProductName`) VALUES (5, 45, 700, 4, 'Sony A7');
INSERT INTO `mydb`.`Product` (`ProductID`, `ProductNumber`, `ProductCost`, `ProductCategory_ProductCategoryID`, `ProductName`) VALUES (6, 270, 6, 5, 'ChildrenMilk');
INSERT INTO `mydb`.`Product` (`ProductID`, `ProductNumber`, `ProductCost`, `ProductCategory_ProductCategoryID`, `ProductName`) VALUES (7, 560, 7, 5, 'CaMilk');
INSERT INTO `mydb`.`Product` (`ProductID`, `ProductNumber`, `ProductCost`, `ProductCategory_ProductCategoryID`, `ProductName`) VALUES (8, 20, 3, 5, 'NoSugarMilk');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`SalesPerson`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`SalesPerson` (`SalesPersonID`, `SalesPersonName`, `Supplier_SupplierID`) VALUES (1, 'Bob', 1);
INSERT INTO `mydb`.`SalesPerson` (`SalesPersonID`, `SalesPersonName`, `Supplier_SupplierID`) VALUES (2, 'Jack', 2);
INSERT INTO `mydb`.`SalesPerson` (`SalesPersonID`, `SalesPersonName`, `Supplier_SupplierID`) VALUES (3, 'Troy', 3);
INSERT INTO `mydb`.`SalesPerson` (`SalesPersonID`, `SalesPersonName`, `Supplier_SupplierID`) VALUES (4, 'Lily', 1);
INSERT INTO `mydb`.`SalesPerson` (`SalesPersonID`, `SalesPersonName`, `Supplier_SupplierID`) VALUES (5, 'Hope', 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`MarketSupplierOrder`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`MarketSupplierOrder` (`MarketSupplierOrderID`, `OrderDate`) VALUES (1, '2017-11-28');
INSERT INTO `mydb`.`MarketSupplierOrder` (`MarketSupplierOrderID`, `OrderDate`) VALUES (2, '2017-10-19');
INSERT INTO `mydb`.`MarketSupplierOrder` (`MarketSupplierOrderID`, `OrderDate`) VALUES (3, '2017-06-13');
INSERT INTO `mydb`.`MarketSupplierOrder` (`MarketSupplierOrderID`, `OrderDate`) VALUES (4, '2017-01-27');
INSERT INTO `mydb`.`MarketSupplierOrder` (`MarketSupplierOrderID`, `OrderDate`) VALUES (5, '2017-11-28');
INSERT INTO `mydb`.`MarketSupplierOrder` (`MarketSupplierOrderID`, `OrderDate`) VALUES (6, '2017-11-28');
INSERT INTO `mydb`.`MarketSupplierOrder` (`MarketSupplierOrderID`, `OrderDate`) VALUES (7, '2017-01-27');
INSERT INTO `mydb`.`MarketSupplierOrder` (`MarketSupplierOrderID`, `OrderDate`) VALUES (8, '2017-10-02');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`MarketSupplierOrderItem`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`MarketSupplierOrderItem` (`Product_ProductID`, `MarketSupplierOrder_MarketSupplierOrderID`, `MarketSupplierOrderItemPrice`, `MarketSupplierOrderItemNumber`) VALUES (1, 1, 20, 30);
INSERT INTO `mydb`.`MarketSupplierOrderItem` (`Product_ProductID`, `MarketSupplierOrder_MarketSupplierOrderID`, `MarketSupplierOrderItemPrice`, `MarketSupplierOrderItemNumber`) VALUES (2, 1, 30, 25);
INSERT INTO `mydb`.`MarketSupplierOrderItem` (`Product_ProductID`, `MarketSupplierOrder_MarketSupplierOrderID`, `MarketSupplierOrderItemPrice`, `MarketSupplierOrderItemNumber`) VALUES (1, 2, 22, 45);
INSERT INTO `mydb`.`MarketSupplierOrderItem` (`Product_ProductID`, `MarketSupplierOrder_MarketSupplierOrderID`, `MarketSupplierOrderItemPrice`, `MarketSupplierOrderItemNumber`) VALUES (2, 2, 33, 66);
INSERT INTO `mydb`.`MarketSupplierOrderItem` (`Product_ProductID`, `MarketSupplierOrder_MarketSupplierOrderID`, `MarketSupplierOrderItemPrice`, `MarketSupplierOrderItemNumber`) VALUES (3, 3, 980, 45);
INSERT INTO `mydb`.`MarketSupplierOrderItem` (`Product_ProductID`, `MarketSupplierOrder_MarketSupplierOrderID`, `MarketSupplierOrderItemPrice`, `MarketSupplierOrderItemNumber`) VALUES (4, 3, 560, 77);
INSERT INTO `mydb`.`MarketSupplierOrderItem` (`Product_ProductID`, `MarketSupplierOrder_MarketSupplierOrderID`, `MarketSupplierOrderItemPrice`, `MarketSupplierOrderItemNumber`) VALUES (4, 4, 570, 89);
INSERT INTO `mydb`.`MarketSupplierOrderItem` (`Product_ProductID`, `MarketSupplierOrder_MarketSupplierOrderID`, `MarketSupplierOrderItemPrice`, `MarketSupplierOrderItemNumber`) VALUES (5, 5, 7, 13);
INSERT INTO `mydb`.`MarketSupplierOrderItem` (`Product_ProductID`, `MarketSupplierOrder_MarketSupplierOrderID`, `MarketSupplierOrderItemPrice`, `MarketSupplierOrderItemNumber`) VALUES (1, 6, 5, 67);
INSERT INTO `mydb`.`MarketSupplierOrderItem` (`Product_ProductID`, `MarketSupplierOrder_MarketSupplierOrderID`, `MarketSupplierOrderItemPrice`, `MarketSupplierOrderItemNumber`) VALUES (6, 7, 4, 78);
INSERT INTO `mydb`.`MarketSupplierOrderItem` (`Product_ProductID`, `MarketSupplierOrder_MarketSupplierOrderID`, `MarketSupplierOrderItemPrice`, `MarketSupplierOrderItemNumber`) VALUES (1, 8, 25, 5);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`SuperMarket`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`SuperMarket` (`SuperMarketID`, `SuperMarketName`, `Territory_TerritoryID`) VALUES (1, 'StarMarket', 1);
INSERT INTO `mydb`.`SuperMarket` (`SuperMarketID`, `SuperMarketName`, `Territory_TerritoryID`) VALUES (2, 'Walmart', 2);
INSERT INTO `mydb`.`SuperMarket` (`SuperMarketID`, `SuperMarketName`, `Territory_TerritoryID`) VALUES (3, 'Target', 3);
INSERT INTO `mydb`.`SuperMarket` (`SuperMarketID`, `SuperMarketName`, `Territory_TerritoryID`) VALUES (4, 'StopShop', 4);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`SuperMarket_has_MarketSupplierOrder`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`SuperMarket_has_MarketSupplierOrder` (`SuperMarket_SuperMarketID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (1, 1);
INSERT INTO `mydb`.`SuperMarket_has_MarketSupplierOrder` (`SuperMarket_SuperMarketID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (1, 2);
INSERT INTO `mydb`.`SuperMarket_has_MarketSupplierOrder` (`SuperMarket_SuperMarketID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (1, 3);
INSERT INTO `mydb`.`SuperMarket_has_MarketSupplierOrder` (`SuperMarket_SuperMarketID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (2, 4);
INSERT INTO `mydb`.`SuperMarket_has_MarketSupplierOrder` (`SuperMarket_SuperMarketID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (2, 5);
INSERT INTO `mydb`.`SuperMarket_has_MarketSupplierOrder` (`SuperMarket_SuperMarketID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (3, 6);
INSERT INTO `mydb`.`SuperMarket_has_MarketSupplierOrder` (`SuperMarket_SuperMarketID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (3, 7);
INSERT INTO `mydb`.`SuperMarket_has_MarketSupplierOrder` (`SuperMarket_SuperMarketID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (4, 8);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Department`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Department` (`DepartmentID`, `DepartmentName`) VALUES (1, 'Accounting');
INSERT INTO `mydb`.`Department` (`DepartmentID`, `DepartmentName`) VALUES (2, 'Sale');
INSERT INTO `mydb`.`Department` (`DepartmentID`, `DepartmentName`) VALUES (3, 'Inventory');
INSERT INTO `mydb`.`Department` (`DepartmentID`, `DepartmentName`) VALUES (4, 'Management');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Employee`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Employee` (`EmployeeID`, `EmployeeName`, `EmployeeSalary`, `EmployeePhone`, `Department_DepartmentID`) VALUES (1, 'Aleece Huish', 3000, '622-763-1183', 1);
INSERT INTO `mydb`.`Employee` (`EmployeeID`, `EmployeeName`, `EmployeeSalary`, `EmployeePhone`, `Department_DepartmentID`) VALUES (2, 'Maxy Patrone	', 4000, '238-944-5862', 1);
INSERT INTO `mydb`.`Employee` (`EmployeeID`, `EmployeeName`, `EmployeeSalary`, `EmployeePhone`, `Department_DepartmentID`) VALUES (3, 'Beverly Buddock', 5000, '584-581-2212', 2);
INSERT INTO `mydb`.`Employee` (`EmployeeID`, `EmployeeName`, `EmployeeSalary`, `EmployeePhone`, `Department_DepartmentID`) VALUES (4, 'Renelle Sherrington', 2000, '213-507-2362', 3);
INSERT INTO `mydb`.`Employee` (`EmployeeID`, `EmployeeName`, `EmployeeSalary`, `EmployeePhone`, `Department_DepartmentID`) VALUES (5, 'Pete Georges', 2300, '210-645-4099', 3);
INSERT INTO `mydb`.`Employee` (`EmployeeID`, `EmployeeName`, `EmployeeSalary`, `EmployeePhone`, `Department_DepartmentID`) VALUES (6, 'Maddi Flanaghan', 3500, '210-659-8849', 4);
INSERT INTO `mydb`.`Employee` (`EmployeeID`, `EmployeeName`, `EmployeeSalary`, `EmployeePhone`, `Department_DepartmentID`) VALUES (7, 'Devland Linturn', 4000, '389-642-6456', 4);
INSERT INTO `mydb`.`Employee` (`EmployeeID`, `EmployeeName`, `EmployeeSalary`, `EmployeePhone`, `Department_DepartmentID`) VALUES (8, 'Lilli MacKereth', 3200, '598-828-1012', 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Customer`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Customer` (`CustomerID`) VALUES (1);
INSERT INTO `mydb`.`Customer` (`CustomerID`) VALUES (2);
INSERT INTO `mydb`.`Customer` (`CustomerID`) VALUES (3);
INSERT INTO `mydb`.`Customer` (`CustomerID`) VALUES (4);
INSERT INTO `mydb`.`Customer` (`CustomerID`) VALUES (5);
INSERT INTO `mydb`.`Customer` (`CustomerID`) VALUES (6);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`MemberShip`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`MemberShip` (`MemberShipID`, `MemberShipName`, `MemberShipPhone`, `Customer_CustomerID`) VALUES (1, 'Ernesta Kubicka', '584-663-9466', 1);
INSERT INTO `mydb`.`MemberShip` (`MemberShipID`, `MemberShipName`, `MemberShipPhone`, `Customer_CustomerID`) VALUES (2, 'Friedrich Zuanelli', '111-106-9370', 4);
INSERT INTO `mydb`.`MemberShip` (`MemberShipID`, `MemberShipName`, `MemberShipPhone`, `Customer_CustomerID`) VALUES (3, 'Shae Toseland', '486-270-5760', 6);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`CustomerSupermarketOrder`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`CustomerSupermarketOrder` (`CustomerSupermarketOrderID`, `Date`, `SuperMarket_SuperMarketID`, `Customer_CustomerID`) VALUES (1, '2017-05-12', 1, 1);
INSERT INTO `mydb`.`CustomerSupermarketOrder` (`CustomerSupermarketOrderID`, `Date`, `SuperMarket_SuperMarketID`, `Customer_CustomerID`) VALUES (2, '2017-06-24', 1, 2);
INSERT INTO `mydb`.`CustomerSupermarketOrder` (`CustomerSupermarketOrderID`, `Date`, `SuperMarket_SuperMarketID`, `Customer_CustomerID`) VALUES (3, '2017-10-31', 2, 3);
INSERT INTO `mydb`.`CustomerSupermarketOrder` (`CustomerSupermarketOrderID`, `Date`, `SuperMarket_SuperMarketID`, `Customer_CustomerID`) VALUES (4, '2017-03-29', 2, 4);
INSERT INTO `mydb`.`CustomerSupermarketOrder` (`CustomerSupermarketOrderID`, `Date`, `SuperMarket_SuperMarketID`, `Customer_CustomerID`) VALUES (5, '2017-03-29', 3, 5);
INSERT INTO `mydb`.`CustomerSupermarketOrder` (`CustomerSupermarketOrderID`, `Date`, `SuperMarket_SuperMarketID`, `Customer_CustomerID`) VALUES (6, '2017-10-10', 3, 5);
INSERT INTO `mydb`.`CustomerSupermarketOrder` (`CustomerSupermarketOrderID`, `Date`, `SuperMarket_SuperMarketID`, `Customer_CustomerID`) VALUES (7, '2017-06-09', 4, 6);
INSERT INTO `mydb`.`CustomerSupermarketOrder` (`CustomerSupermarketOrderID`, `Date`, `SuperMarket_SuperMarketID`, `Customer_CustomerID`) VALUES (8, '2017-08-19', 1, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`InventoryCategory`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`InventoryCategory` (`InventoryCategoryID`, `InventoryCategoryName`) VALUES (1, 'Book');
INSERT INTO `mydb`.`InventoryCategory` (`InventoryCategoryID`, `InventoryCategoryName`) VALUES (2, 'Office');
INSERT INTO `mydb`.`InventoryCategory` (`InventoryCategoryID`, `InventoryCategoryName`) VALUES (3, 'Electro');
INSERT INTO `mydb`.`InventoryCategory` (`InventoryCategoryID`, `InventoryCategoryName`) VALUES (4, 'Drink');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`InventoryItem`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`InventoryItem` (`InventoryItemID`, `InventoryItemName`, `InventoryItemSalePrice`, `InventoryItemNumber`, `InventoryCategory_InventoryCategoryID`) VALUES (1, 'MarketStoryBook', '25', '14', 1);
INSERT INTO `mydb`.`InventoryItem` (`InventoryItemID`, `InventoryItemName`, `InventoryItemSalePrice`, `InventoryItemNumber`, `InventoryCategory_InventoryCategoryID`) VALUES (2, 'MarketNoteBook', '34', '24', 2);
INSERT INTO `mydb`.`InventoryItem` (`InventoryItemID`, `InventoryItemName`, `InventoryItemSalePrice`, `InventoryItemNumber`, `InventoryCategory_InventoryCategoryID`) VALUES (3, 'MarketIPhone8', '1000', '44', 3);
INSERT INTO `mydb`.`InventoryItem` (`InventoryItemID`, `InventoryItemName`, `InventoryItemSalePrice`, `InventoryItemNumber`, `InventoryCategory_InventoryCategoryID`) VALUES (4, 'MarketCannonM5', '600', '66', 3);
INSERT INTO `mydb`.`InventoryItem` (`InventoryItemID`, `InventoryItemName`, `InventoryItemSalePrice`, `InventoryItemNumber`, `InventoryCategory_InventoryCategoryID`) VALUES (5, 'MarketSonyA7', '10', '45', 3);
INSERT INTO `mydb`.`InventoryItem` (`InventoryItemID`, `InventoryItemName`, `InventoryItemSalePrice`, `InventoryItemNumber`, `InventoryCategory_InventoryCategoryID`) VALUES (6, 'MarketChildrenMilk', '11', '23', 4);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`CustomerSupermarketOrderItem`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (1, 1, 1);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (1, 2, 2);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (1, 3, 3);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (1, 4, 1);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (2, 1, 1);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (2, 3, 4);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (3, 4, 1);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (3, 3, 2);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (4, 4, 3);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (4, 5, 1);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (5, 1, 2);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (5, 6, 1);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (6, 6, 4);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (7, 1, 2);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (8, 1, 3);
INSERT INTO `mydb`.`CustomerSupermarketOrderItem` (`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) VALUES (8, 2, 4);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`SuperMarket_has_Customer`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`SuperMarket_has_Customer` (`SuperMarket_SuperMarketID`, `Customer_CustomerID`) VALUES (1, 1);
INSERT INTO `mydb`.`SuperMarket_has_Customer` (`SuperMarket_SuperMarketID`, `Customer_CustomerID`) VALUES (1, 2);
INSERT INTO `mydb`.`SuperMarket_has_Customer` (`SuperMarket_SuperMarketID`, `Customer_CustomerID`) VALUES (2, 3);
INSERT INTO `mydb`.`SuperMarket_has_Customer` (`SuperMarket_SuperMarketID`, `Customer_CustomerID`) VALUES (2, 4);
INSERT INTO `mydb`.`SuperMarket_has_Customer` (`SuperMarket_SuperMarketID`, `Customer_CustomerID`) VALUES (3, 5);
INSERT INTO `mydb`.`SuperMarket_has_Customer` (`SuperMarket_SuperMarketID`, `Customer_CustomerID`) VALUES (4, 6);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`OrderOfSalesPerson`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`OrderOfSalesPerson` (`SalesPerson_SalesPersonID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (1, 1);
INSERT INTO `mydb`.`OrderOfSalesPerson` (`SalesPerson_SalesPersonID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (1, 2);
INSERT INTO `mydb`.`OrderOfSalesPerson` (`SalesPerson_SalesPersonID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (2, 3);
INSERT INTO `mydb`.`OrderOfSalesPerson` (`SalesPerson_SalesPersonID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (2, 4);
INSERT INTO `mydb`.`OrderOfSalesPerson` (`SalesPerson_SalesPersonID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (3, 5);
INSERT INTO `mydb`.`OrderOfSalesPerson` (`SalesPerson_SalesPersonID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (4, 6);
INSERT INTO `mydb`.`OrderOfSalesPerson` (`SalesPerson_SalesPersonID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (5, 7);
INSERT INTO `mydb`.`OrderOfSalesPerson` (`SalesPerson_SalesPersonID`, `MarketSupplierOrder_MarketSupplierOrderID`) VALUES (1, 8);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`MarketInventroyCategoty`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`MarketInventroyCategoty` (`SuperMarket_SuperMarketID`, `InventoryCategory_InventoryCategoryID`) VALUES (1, 1);
INSERT INTO `mydb`.`MarketInventroyCategoty` (`SuperMarket_SuperMarketID`, `InventoryCategory_InventoryCategoryID`) VALUES (1, 3);
INSERT INTO `mydb`.`MarketInventroyCategoty` (`SuperMarket_SuperMarketID`, `InventoryCategory_InventoryCategoryID`) VALUES (2, 3);
INSERT INTO `mydb`.`MarketInventroyCategoty` (`SuperMarket_SuperMarketID`, `InventoryCategory_InventoryCategoryID`) VALUES (3, 1);
INSERT INTO `mydb`.`MarketInventroyCategoty` (`SuperMarket_SuperMarketID`, `InventoryCategory_InventoryCategoryID`) VALUES (3, 4);
INSERT INTO `mydb`.`MarketInventroyCategoty` (`SuperMarket_SuperMarketID`, `InventoryCategory_InventoryCategoryID`) VALUES (4, 1);
INSERT INTO `mydb`.`MarketInventroyCategoty` (`SuperMarket_SuperMarketID`, `InventoryCategory_InventoryCategoryID`) VALUES (1, 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`DepartmentsOfSupermarket`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`DepartmentsOfSupermarket` (`SuperMarket_SuperMarketID`, `Department_DepartmentID`) VALUES (1, 1);
INSERT INTO `mydb`.`DepartmentsOfSupermarket` (`SuperMarket_SuperMarketID`, `Department_DepartmentID`) VALUES (1, 2);
INSERT INTO `mydb`.`DepartmentsOfSupermarket` (`SuperMarket_SuperMarketID`, `Department_DepartmentID`) VALUES (1, 3);
INSERT INTO `mydb`.`DepartmentsOfSupermarket` (`SuperMarket_SuperMarketID`, `Department_DepartmentID`) VALUES (2, 2);
INSERT INTO `mydb`.`DepartmentsOfSupermarket` (`SuperMarket_SuperMarketID`, `Department_DepartmentID`) VALUES (2, 3);
INSERT INTO `mydb`.`DepartmentsOfSupermarket` (`SuperMarket_SuperMarketID`, `Department_DepartmentID`) VALUES (3, 1);
INSERT INTO `mydb`.`DepartmentsOfSupermarket` (`SuperMarket_SuperMarketID`, `Department_DepartmentID`) VALUES (3, 2);
INSERT INTO `mydb`.`DepartmentsOfSupermarket` (`SuperMarket_SuperMarketID`, `Department_DepartmentID`) VALUES (3, 3);
INSERT INTO `mydb`.`DepartmentsOfSupermarket` (`SuperMarket_SuperMarketID`, `Department_DepartmentID`) VALUES (4, 1);
INSERT INTO `mydb`.`DepartmentsOfSupermarket` (`SuperMarket_SuperMarketID`, `Department_DepartmentID`) VALUES (4, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`CategoryOfSupplier`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`CategoryOfSupplier` (`Supplier_SupplierID`, `ProductCategory_ProductCategoryID`) VALUES (1, 2);
INSERT INTO `mydb`.`CategoryOfSupplier` (`Supplier_SupplierID`, `ProductCategory_ProductCategoryID`) VALUES (1, 3);
INSERT INTO `mydb`.`CategoryOfSupplier` (`Supplier_SupplierID`, `ProductCategory_ProductCategoryID`) VALUES (1, 4);
INSERT INTO `mydb`.`CategoryOfSupplier` (`Supplier_SupplierID`, `ProductCategory_ProductCategoryID`) VALUES (2, 1);
INSERT INTO `mydb`.`CategoryOfSupplier` (`Supplier_SupplierID`, `ProductCategory_ProductCategoryID`) VALUES (2, 2);
INSERT INTO `mydb`.`CategoryOfSupplier` (`Supplier_SupplierID`, `ProductCategory_ProductCategoryID`) VALUES (3, 1);
INSERT INTO `mydb`.`CategoryOfSupplier` (`Supplier_SupplierID`, `ProductCategory_ProductCategoryID`) VALUES (3, 2);
INSERT INTO `mydb`.`CategoryOfSupplier` (`Supplier_SupplierID`, `ProductCategory_ProductCategoryID`) VALUES (3, 4);
INSERT INTO `mydb`.`CategoryOfSupplier` (`Supplier_SupplierID`, `ProductCategory_ProductCategoryID`) VALUES (1, 5);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`SupplierOrderInventory`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`SupplierOrderInventory` (`MarketSupplierOrderItem_Product_ProductID`, `MarketSupplierOrderID`, `InventoryItem_InventoryItemID`) VALUES (1, 1, 1);
INSERT INTO `mydb`.`SupplierOrderInventory` (`MarketSupplierOrderItem_Product_ProductID`, `MarketSupplierOrderID`, `InventoryItem_InventoryItemID`) VALUES (2, 1, 2);
INSERT INTO `mydb`.`SupplierOrderInventory` (`MarketSupplierOrderItem_Product_ProductID`, `MarketSupplierOrderID`, `InventoryItem_InventoryItemID`) VALUES (1, 2, 1);
INSERT INTO `mydb`.`SupplierOrderInventory` (`MarketSupplierOrderItem_Product_ProductID`, `MarketSupplierOrderID`, `InventoryItem_InventoryItemID`) VALUES (2, 2, 2);
INSERT INTO `mydb`.`SupplierOrderInventory` (`MarketSupplierOrderItem_Product_ProductID`, `MarketSupplierOrderID`, `InventoryItem_InventoryItemID`) VALUES (3, 3, 3);
INSERT INTO `mydb`.`SupplierOrderInventory` (`MarketSupplierOrderItem_Product_ProductID`, `MarketSupplierOrderID`, `InventoryItem_InventoryItemID`) VALUES (4, 3, 4);
INSERT INTO `mydb`.`SupplierOrderInventory` (`MarketSupplierOrderItem_Product_ProductID`, `MarketSupplierOrderID`, `InventoryItem_InventoryItemID`) VALUES (4, 4, 4);
INSERT INTO `mydb`.`SupplierOrderInventory` (`MarketSupplierOrderItem_Product_ProductID`, `MarketSupplierOrderID`, `InventoryItem_InventoryItemID`) VALUES (5, 5, 5);
INSERT INTO `mydb`.`SupplierOrderInventory` (`MarketSupplierOrderItem_Product_ProductID`, `MarketSupplierOrderID`, `InventoryItem_InventoryItemID`) VALUES (1, 6, 1);
INSERT INTO `mydb`.`SupplierOrderInventory` (`MarketSupplierOrderItem_Product_ProductID`, `MarketSupplierOrderID`, `InventoryItem_InventoryItemID`) VALUES (6, 7, 6);
INSERT INTO `mydb`.`SupplierOrderInventory` (`MarketSupplierOrderItem_Product_ProductID`, `MarketSupplierOrderID`, `InventoryItem_InventoryItemID`) VALUES (1, 8, 1);

COMMIT;


-- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- VIEW 1: Create a view that show all the customers who has any order of any product
create view product_customer as 
select CustomerID,InventoryItemName as ItemName,CustomerSupermarketOrderItemSaleNumber as ItemNumber,
CustomerSupermarketOrderID as OrderID,SuperMarketName,InventoryItemSalePrice*CustomerSupermarketOrderItemSaleNumber as TotalPrice
from
Customer,CustomerSuperMarketOrder,SuperMarket,CustomerSuperMarketOrderItem,InventoryItem
where
Customer.CustomerID=CustomerSuperMarketOrder.Customer_CustomerID
and CustomerSuperMarketOrder.SuperMarket_SuperMarketID=SuperMarket.SuperMarketID
and CustomerSuperMarketOrder.CustomerSupermarketOrderID=CustomerSuperMarketOrderItem.CustomerSuperMarketOrder_CustomerSupermarketOrderID
and CustomerSuperMarketOrderItem.InventoryItem_InventoryItemID=InventoryItem.InventoryItemID
;

select * from product_customer;

-- select the specific customer's order
select ItemName,ItemNumber,OrderID,TotalPrice
from
product_customer
where CustomerID=1;

-- select specific order's total price
select OrderID,sum(TotalPrice) as OrderTotalPrice
from 
product_customer
where OrderID=2;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- VIEW 2: Create a view that shows all the suppliers' all the products
create view prodcut_supplier as
select SupplierID,SupplierName,ProductCategoryName,ProductName
from Supplier, CategoryOfSupplier,ProductCategory,Product
where
Supplier.SupplierID=CategoryOfSupplier.Supplier_SupplierID
and CategoryOfSupplier.ProductCategory_ProductCategoryID=ProductCategory.ProductCategoryIDA
and ProductCategory.ProductCategoryID=Product.ProductCategory_ProductCategoryID;

select * from prodcut_supplier;

-- select all the products of specific supplier
select ProductCategoryName,ProductName
from prodcut_supplier
where SupplierID=1;

-- select distinct products of all supplier
select distinct ProductName
from prodcut_supplier;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- PROCEDURE 1: Calculate the total price of the MarketSupplierOrder according to OrderID
delimiter $
create procedure product_pricing
(
in orderID int,
out priceSum int
)

begin
select sum(MarketSupplierOrderItemPrice*MarketSupplierOrderItemNumber)
from MarketSupplierOrderItem
where 
MarketSupplierOrder_MarketSupplierOrderID=orderID
into priceSum;
end
$

delimiter ;
select * from MarketSupplierOrderItem;
call product_pricing(1,@sum);
select @sum;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- PROCEDURE 2: Check specific day of customer 's  order and order details

delimiter $
create procedure customer_date
(
in orderDate date,
out OrderID int,
out totalPriceOfDate int
)

begin

create view OrderDetailsDate as 
select CustomerSupermarketOrderID, CustomerSupermarketOrder.Date, CustomerID, InventoryItemName,
InventoryItemSalePrice,InventoryItemNumber,sum(InventoryItemSalePrice*InventoryItemNumber) as totalPrice
FROM 
CustomerSupermarketOrder,CustomerSupermarketOrderItem,InventoryItem,Customer
where
CustomerSupermarketOrder.CustomerSupermarketOrderID=CustomerSupermarketOrderItem.CustomerSupermarketOrder_CustomerSupermarketOrderID
and 
CustomerSupermarketOrder.Customer_CustomerID=Customer.CustomerID
and 
CustomerSupermarketOrderItem.InventoryItem_InventoryItemID=InventoryItem.InventoryItemID;


select CustomerSupermarketOrderID from OrderDetailsDate
where Date=orderDate
limit 1
into OrderID;

select totalPrice from OrderDetailsDate
where Date=orderDate
limit 1
into  totalPriceOfDate;

end
$

delimiter ;
-- SELECT @@SESSION.sql_mode;
-- SET SESSION sql_mode = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE';
select * from OrderDetailsDate;

-- show create procedure customer_date;
call customer_date('2017-05-12',@OrderID,@totalPriceOfDate);
select @OrderID,@totalPriceOfDate;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- TRIGGER 1: Record Product Information if it is updated
create table product_update
(
productUpdateID INT NOT NULL,
productUpdateDate date
);

delimiter $
create trigger tr_productUpdate
before update on Product
for each row

begin
insert into product_update
set productUpdateID=OLD.ProductID,
productUpdateDate=now();
end
$

delimiter ;

update Product
set ProductNumber=150
where
ProductID=1;

select * from product_update;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- TRIGGER 2: Record Employee Information if he/she left the supermarket
create table leave_employee
(
EmployeeID INT NOT NULL,
EmployeeName VARCHAR(45) NULL,
EmployeeLeaveDate date,
EmployeeStatus VARCHAR(45) NULL
);

delimiter $
create trigger tr_leaveEmployee
before delete on Employee
for each row

begin
insert into leave_employee
set EmployeeID=OLD.EmployeeID,
EmployeeName=OLD.EmployeeName,
EmployeeLeaveDate=now(),
EmployeeStatus='Leave';
end
$


delimiter ;
select * from Employee;

INSERT INTO Employee (`EmployeeID`, `EmployeeName`, `EmployeeSalary`, `EmployeePhone`, `Department_DepartmentID`) 
VALUES (9, 'Mengting Yang', 5000, '857-209-1386', 1);
delete from Employee where EmployeeID=9;

INSERT INTO Employee (`EmployeeID`, `EmployeeName`, `EmployeeSalary`, `EmployeePhone`, `Department_DepartmentID`) 
VALUES (10, 'Chiwen Shi', 6000, '857-744-1222', 2);
delete from Employee where EmployeeID=10;

select * from leave_employee;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- TRIGGER 3: Reduce the Inventory Number if Customer buy new things
delimiter $
create trigger tr_productOrder 
after insert on  CustomerSupermarketOrderItem
for each row

begin
update InventoryItem
set InventoryItem.InventoryItemNumber=InventoryItem.InventoryItemNumber-new.CustomerSupermarketOrderItemSaleNumber
where
InventoryItem.InventoryItemID=new.InventoryItem_InventoryItemID;
end
$

delimiter ;

select *  from CustomerSupermarketOrderItem;

INSERT INTO `mydb`.`CustomerSupermarketOrderItem` 
(`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) 
VALUES (8, 1, 2);

INSERT INTO `mydb`.`CustomerSupermarketOrderItem` 
(`CustomerSupermarketOrder_CustomerSupermarketOrderID`, `InventoryItem_InventoryItemID`, `CustomerSupermarketOrderItemSaleNumber`) 
VALUES (7, 2, 1);

select *  from InventoryItem;

